Rules for coupling ISSM and MITgcm:

>>>> LEGEND FOR coupling_rules.jpg

Very First Initialization:
0. Pass M0 = Ii->m(H0) to MITgcm

Initialization:
1. Run ISSM no melt
   Results in H1d, new thickness from
   H1d = H0 + Dt (dH/dt) (dynamic part only)
2. Pass M1D = Ii->m(H1d) to MITgcm
   Compute dynamic ice mass change only on MITgcm side, i.e.,
   not including melt rate: Phi = (M1d - M0) / Dt
   Note that by computing on the MITgcm side, this will include a
   correction for any possible deviation between ISSM and MITgcm thickness.

All Steps:
3. Run MITgcm with dynamic thinning + correction.
   Results in M1, a new ice thickness calculated by the ocean model.
4. Pass Melt1 rate to ISSM.
5. Run ISSM with melt rate: melt = Im->i(Melt1).
   Results in H1, a new ice thickness calculated by ISSM.
1. Run ISSM no melt
   Results in H1d, new thickness from
   H1d = H0 + Dt (dH/dt) (dynamic part only)
2. Pass M1D = Ii->m(H1d) to MITgcm

Termination:
3. Compute dynamic ice mass change only on MITgcm side, i.e.,
   not including melt rate: Phi = (M1d - M0) / Dt
   Note that by computing on the MITgcm side, this will include a
   correction for any possible deviation between ISSM and MITgcm thickness.
   Run MITgcm with this dynamic thinning + correction.
   Results in M1, a new ice thickness calculated by the ocean model.
4. Pass Melt1 rate to ISSM.
5. Run ISSM with melt rate: melt = Im->i(Melt1).
   Results in H1, a new ice thickness calculated by ISSM.


>>>> CREATE A FILE WITH ALL THE NAMES AND TAGS
>>>> FOR THE INFORMATION EXCHANGE INCLUDING:

CouplingTime           1           Real*8  10001000
IceModelTime           1           Real*8  10001001
OceanModelTime         1           Real*8  10001002
Nx                     1           Integer 10001003
Ny                     1           Integer 10001004
xC                     Nx*Ny       Real*8  10001005
yC                     Nx*Ny       Real*8  10001006
OceanMelt              Nx*Ny       Real*8  10001007
    melt_mesh[i]=-melt_mesh[i]/rho_ice; heat flux provided by ocean is in kg/m^2/s
IceMass    (kg/m^2)    Nx*Ny       Real*8  10001008

>>>> OceanMelt and IceMass are on MITgcm grid (xC, yC).
>>>> ISSM takes care of interpolation from and to MITgcm grid.

>>>> COMPUTED ON MITgcm side:

DIceMassDt (kg/m^2/s)  Nx*Ny
    dynamic ice mass change only, i.e., not including melt rate,
    + correction term to keep MITgcm IceMass in sync with ISSM

>>>> INITIALIZATION FROM SCRATCH

Initialization:

  IceModelTime   = 0
  OceanModelTime = 0

  I0a. ISSM sends CouplingTime, the interval at which we couple
  I0b. MITgcm sends grid size (NX and NY)
  I0c. MITgcm sends grid coordinates of center of cells
       (longitude -180 <= XC < 180 and latitude YC)
  I0d. ISSM sends IceMass to MITgcm
  I1.  ISSM integrates with zero OceanMelt from
       IceModelTime = 0 to CouplingTime
  I2a. ISSM sends (dynamic) IceMass to MITgcm
  I2b. MITgcm computes DIceMassDT (dynamic ice mass change + correction)

First Recurrent Coupling Exchange:

  IceModelTime   = 0
  OceanModelTime = 0

  C3a. ISSM sends ice model time IceTimeTag
  C3b. MITgcm sends ocean model time OceanTimeTag
  C3c. MITgcm integrates from
       OceanModelTime = 0 to CouplingTime
  C4.  MITgcm sends OceanMelt to ISSM
  C5.  ISSM integrates with OceanMelt from
       IceModelTime = 0 to 1 CouplingTime
  C1.  ISSM integrates with zero OceanMelt from
       IceModelTime = 1 to 2 CouplingTime
  C2a. ISSM sends (dynamic) IceMass to MITgcm
  C2b. MITgcm computes DIceMassDT (dynamic ice mass change + correction)

  IceModelTime   = CouplingTime
  OceanModelTime = CouplingTime

...

Coupling Exchange M:

  IceModelTime   = (M-1) * CouplingTime
  OceanModelTime = (M-1) * CouplingTime

  C3a. ISSM sends ice model time IceTimeTag
  C3b. MITgcm sends ocean model time OceanTimeTag
  C3c. MITgcm integrates from
       OceanModelTime = (M-1) to M * CouplingTime
  C4.  MITgcm sends OceanMelt to ISSM
  C5.  ISSM integrates with OceanMelt from
       IceModelTime = (M-1) to M * CouplingTime
  C1.  ISSM integrates with zero OceanMelt from
       IceModelTime = M to (M+1) * CouplingTime
  C2a. ISSM sends (dynamic) IceMass to MITgcm
  C2b. MITgcm computes DIceMassDT (dynamic ice mass change + correction)

  IceModelTime   = M * CouplingTime
  OceanModelTime = M * CouplingTime

...

Termination after N coupling exchanges:

  IceModelTime   = (N-1) * CouplingTime
  OceanModelTime = (N-1) * CouplingTime

  C3a. ISSM sends ice model time IceTimeTag
  C3b. MITgcm sends ocean model time OceanTimeTag
  C3c. MITgcm integrates from
       OceanModelTime = (N-1) to N * CouplingTime
  C4.  MITgcm sends OceanMelt to ISSM
  C5.  ISSM integrates with OceanMelt from
       IceModelTime = (N-1) to N * CouplingTime

  IceModelTime   = N * CouplingTime
  OceanModelTime = N * CouplingTime

  T1. ISSM saves state to restart files
  T2. MITgcm saves state to restart files


>>>> RESTART FROM SAVED STATE

Initialization:

  IceModelTime   = N * CouplingTime
  OceanModelTime = N * CouplingTime

  R1. ISSM reads state from restart files
  R2. MITgcm reads state from restart files

  I0a. ISSM sends CouplingTime, the interval at which we couple
  I0b. MITgcm sends grid size (NX and NY)
  I0c. MITgcm sends grid coordinates of center of cells
       (longitude -180 <= XC < 180 and latitude YC)
  I2a. ISSM sends (dynamic) IceMass to MITgcm
  I2b. MITgcm computes DIceMassDT (dynamic ice mass change + correction)

First Recurrent Coupling Exchange:

  IceModelTime   = N * CouplingTime
  OceanModelTime = N * CouplingTime

  C3a. ISSM sends ice model time IceTimeTag
  C3b. MITgcm sends ocean model time OceanTimeTag
  C3c. MITgcm integrates from
       OceanModelTime = N to (N+1) * CouplingTime
  C4.  MITgcm sends OceanMelt to ISSM
  C5.  ISSM integrates with OceanMelt from
       IceModelTime = N to (N+1) * CouplingTime
  C1.  ISSM integrates with zero OceanMelt from
       IceModelTime = (N+1) to (N+2) * CouplingTime
  C2a. ISSM sends (dynamic) IceMass to MITgcm
  C2b. MITgcm computes DIceMassDT (dynamic ice mass change + correction)

  IceModelTime   = (N+1) * CouplingTime
  OceanModelTime = (N+1) * CouplingTime

...
